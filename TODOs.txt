Avant de commencer:

faite un git clone sur: https://github.com/Arsene07/jigsaw-tp.git





1) Transformer le projet iki-team en un module 'iki.team' et générer le jar dans un dossier 'modules' qui doit se trouver au même niveau que le dossier
   iki-team.

   -- exécuter le module et assurer vous qu'un fichier est généré avec la sérialisation des objets 'Membre'


    Notes:
        copier le jar jackson-databind dans le dossier 'modules' et les deux autres jar dans un dossier lib
        compiler le module avec javac en mixant class-path et module-path puis en n'utilisant que le module-path
        construiser un jar du module dans le dossier 'modules'

        exécuter le jar

        A ce stade vous avez pu exécuter une application java avec un classpath vide !  REVOLUTION :)

    -- décommenter le code du TODO 1 pour construire une instance de la classe TeamManager sans appeler de constructeur !
       regarder bien le log du build, les warning ..
       utiliser jdeps pour savoir si vous utilisez des éléments internes à la JDK

    -- décommenter le TODO 2 et compiler le module iki-team

2) De même transformer les modules iki-recruitement et iki-mission en modules et générer un jar dans le dossier 'modules'
    Notes:
        des ajutements sont nécessaires côté module iki-team, n'oubliez pas de le rebuilder !
        constater ce que fait le sanity-check qu'on build le module iki-recruitement

    -- exécuter le module recruitement et constater un souci lié à l'introspection et à la sanitychek

3) Transformer le module iki-api en module jigsaw et exécuter le.
    Notes:
        des ajutements sont nécessaires sur les modules iki-recruitement et iki-mission, n'oubliez pas de les rebuilder !

4) Compiler le module iki-team avec maven
    créer un pom.xml
    utiliser la version 3.6.2 du plug-in maven-compiler-plugin


5) construire une image de la jdk avec les modules utilisés par le projet

    modulariser les lib jackson

        clone de jackson-core (modifié): git clone https://github.com/Arsene07/jackson-core.git
        passer sur la branche 2.9: git checkout 2.9

        construction du package pour générer descripteur de module:  mvn clean package

        générer le descripteur de module: jdeps --generate-module-info . target/jackson-core-2.9.3-SNAPSHOT.jar
        copier le fichier généré dans le dossier src en modifiant le nom du module en jackson.core

        compiler le nouveau jackson-core: javac -d classes  --source-path src $(find src/main/java -name '*.java')
        et créer le jar: jar --create  --file ../modules/jackson-core.jar -C classes/ .

        pareil pour jackson-annotations ..

        git clone https://github.com/Arsene07/jackson-annotations.git
        passer sur la branche 2.9: git checkout 2.9

        construction du jar: mvn clean package
        jdeps --generate-module-info . target/jackson-annotations-2.9.3-SNAPSHOT.jar

        copier le fichier généré dans src en modifiant le nom du module en jackson.annotations
        javac -d classes  --source-path src $(find src/main/java -name '*.java')

        jar --create  --file ../modules/jackson-annotations.jar -C classes/ .


        de même pour jackson-databind:

        git clone https://github.com/Arsene07/jackson-databind.git
        compiler:
        javac -d classes --module-path ../modules/  --source-path src $(find src/main/java -name '*.java')

        créer le jar:
        jar --create  --file ../modules/jackson-databind.jar -C classes/ .


        relance le build et l'execution du module iki-api avec les nouveau "vrais" modules, éliminer le classpath

        Générer l'image (attention, correction du typo 'recuitement':

        /Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home/bin/jlink --module-path /Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home/jmods/:modules/:jackson-source/modules/   --add-modules iki.team,iki.recruitement,iki.mission,iki.api --limit-modules iki.team,iki.mission,iki.api,iki.recruitement --output iki-image

        Aller dans le dossier iki-image là ou l'image est créée

        pour voir la liste des modules, faite un: java --list-modules

        puis exécuter le module iki-api, ça devient simple:
            aller dans le dossier bin de l'image créée et faites : ./java -m iki.api/fr.zenika.iki.api.controller.IkiAPI



